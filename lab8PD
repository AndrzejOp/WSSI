import numpy as np
import matplotlib.pyplot as plt
import networkx as nx

class Neuron:
    def __init__(self, name, n_inputs, bias=0., weights=None): #konstruktor
        self.name = name
        self.b = bias
        if weights:
            self.ws = np.array(weights)
        else:
            self.ws = np.random.rand(n_inputs)

    def _f(self, x):  # aktywacja funkcji
        return max(x * .1, x)

    def __call__(self, xs):  #wylicz neuron wyjsciowy
        return self._f(np.dot(xs, self.ws) + self.b)

    def __repr__(self): #dodatkowa funkcja do odpowiedniego nazwania neuronow
        return self.name

class NeuralNetwork:
    def __init__(self):
        self.input_layer = [Neuron(f"Input Layer - Neuron {i+1}", 3) for i in range(3)] #zainicjowanie oraz nazwanie odpowiednich neuronów
        self.hidden_layer1 = [Neuron(f"Hidden Layer 1 - Neuron {i+1}", 3) for i in range(4)]
        self.hidden_layer2 = [Neuron(f"Hidden Layer 2 - Neuron {i+1}", 4) for i in range(4)]
        self.output_neuron = Neuron("Output Layer - Neuron 1", 4)
        self.connections = []
        for input_neuron in self.input_layer: #stowrzenie powiązań między neuronami
            for hidden_neuron1 in self.hidden_layer1:
                self.connections.append((input_neuron, hidden_neuron1))
        for hidden_neuron1 in self.hidden_layer1:
            for hidden_neuron2 in self.hidden_layer2:
                self.connections.append((hidden_neuron1, hidden_neuron2))
        for hidden_neuron2 in self.hidden_layer2:
            self.connections.append((hidden_neuron2, self.output_neuron))

    def visualize_network(self): #wizualizacja sieci
        G = nx.DiGraph()
        layers = [self.input_layer, self.hidden_layer1, self.hidden_layer2, [self.output_neuron]] #tablica warstw
        layer_names = ['Input Layer', 'Hidden Layer 1', 'Hidden Layer 2', 'Output Layer'] #tablica dla nazw warstw

        for i, (layer, name) in enumerate(zip(layers, layer_names)): #dodawanie neuronow do wyjscia
            for neuron_idx, neuron in enumerate(layer):
                G.add_node(neuron, label=neuron.name, subset=i)

        for layer, next_layer in zip(layers, layers[1:]): #dodawanie połączeń do wyjscia
            for neuron in layer:
                for next_neuron in next_layer:
                    G.add_edge(neuron, next_neuron)

        pos = nx.multipartite_layout(G) #wyrysowanie na canvie
        plt.figure(figsize=(8, 4))
        nx.draw(G, pos, with_labels=True, node_size=1000, font_size=8, alpha=0.7)
        plt.show()


nn = NeuralNetwork()
nn.visualize_network()
